// SPDX-FileCopyrightText: 2024 grow platform GmbH
//
// SPDX-License-Identifier: MIT

import { getCheckLogs } from './run'

describe('getCheckLogs', () => {
  it('returns the last check logs', () => {
    const logs = [
      'time=\\"2023-12-18T07:32:08.041Z\\" level=info msg=\\"capturing logs\\" argo=true',
      'info\\t[ PREPARATION ]',
      "info\\treading file 'qg-config.yaml'",
      "info\\treading file '.vars'",
      "info\\treading file '.secrets'",
      'info\\t[ INITIALIZE EXECUTION PLAN ]',
      'info\\tparsing config file',
      'info\\tvalidating config file',
      'info\\tcreating execution plan',
      'info\\ttransform execution plan',
      'info\\treplacing parameters in execution plan',
      "info\\treplacing 'vars' variables in execution plan",
      "info\\treplacing 'secrets' variables in execution plan",
      "info\\treplacing 'env' variables in execution plan",
      'info\\t[ RUN EXECUTION PLAN ]',
      'info\\tstarting execution plan',
      'info\\t[[ CHAPTER: 7 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 5 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 3 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 4 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 8 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 6 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 9 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 2 REQUIREMENT: 1 CHECK: 1 ]]',
      'info\\tproviding manual answer',
      'info\\t  Status: UNANSWERED',
      'info\\t  Reason: This check will be configured later',
      'info\\t  Execution Type: Manual',
      'info\\t[[ CHAPTER: 1 REQUIREMENT: 1 CHECK: 1 ]]',
      "info\\tstarting autopilot 'security-scanner'",
      'info\\t  Status: FAILED',
      'info\\t  Reason: The provided GIT_TOKEN is not valid.',
      'info\\t  Execution Type: Automation',
      'info\\t  Evidence Path: /tmp/onyx-evidence-2023-12-18T07-32-12-787/1_1_1',
      'info\\t  Logs:',
      'info\\t    \\u001b[31m\\u001b[1mERROR | An error has occurred.\\u001b[0m',
      'info\\t    \\u001b[33m\\u001b[1mTraceback (most recent call last):\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/autopilot_utils/\\u001b[0m\\u001b[32m\\u001b[1mcli_base.py\\u001b[0m\\", line \\u001b[33m408\\u001b[0m, in \\u001b[35merror_handler\\u001b[0m',
      'info\\t        \\u001b[1mf\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[35m\\u001b[1m*\\u001b[0m\\u001b[1margs\\u001b[0m\\u001b[1m,\\u001b[0m \\u001b[35m\\u001b[1m**\\u001b[0m\\u001b[1mkwargs\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/autopilot_utils/\\u001b[0m\\u001b[32m\\u001b[1mcli_base.py\\u001b[0m\\", line \\u001b[33m387\\u001b[0m, in \\u001b[35mresult_handler_decorator\\u001b[0m',
      'info\\t        \\u001b[1mf\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[35m\\u001b[1m*\\u001b[0m\\u001b[1margs\\u001b[0m\\u001b[1m,\\u001b[0m \\u001b[35m\\u001b[1m**\\u001b[0m\\u001b[1mkwargs\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/autopilot_utils/\\u001b[0m\\u001b[32m\\u001b[1mcli_base.py\\u001b[0m\\", line \\u001b[33m224\\u001b[0m, in \\u001b[35mmain_cli_entrypoint_wrapper\\u001b[0m',
      'info\\t        \\u001b[1mclick_command\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[35m\\u001b[1m*\\u001b[0m\\u001b[1margs\\u001b[0m\\u001b[1m,\\u001b[0m \\u001b[35m\\u001b[1m**\\u001b[0m\\u001b[1mkwargs\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/security_scanner/\\u001b[0m\\u001b[32m\\u001b[1mcli.py\\u001b[0m\\", line \\u001b[33m19\\u001b[0m, in \\u001b[35mclick_command\\u001b[0m',
      'info\\t        \\u001b[1mconfiguration\\u001b[0m \\u001b[35m\\u001b[1m=\\u001b[0m \\u001b[1mload_configuration\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/security_scanner/\\u001b[0m\\u001b[32m\\u001b[1mconfig.py\\u001b[0m\\", line \\u001b[33m61\\u001b[0m, in \\u001b[35mload_configuration\\u001b[0m',
      'info\\t        \\u001b[35m\\u001b[1mraise\\u001b[0m \\u001b[1mAutopilotConfigurationError\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[36m\\"The provided GIT_TOKEN is not valid.\\"\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t    \\u001b[31m\\u001b[1mgrow.autopilot_utils.errors.AutopilotConfigurationError\\u001b[0m:\\u001b[1m The provided GIT_TOKEN is not valid.\\u001b[0m',
      'info\\t    {\\"status\\": \\"FAILED\\", \\"reason\\": \\"The provided GIT_TOKEN is not valid.\\"}',
      'info\\tcreating result',
      "info\\tstoring results in result file 'qg-result.yaml'",
      'info\\t[ RUN FINALIZER ]',
      "info\\tstoring results in result file 'qg-result.yaml'",
      "info\\tproviding evidences in 'evidence.zip'",
      'time=\\"2023-12-18T07:32:09.042Z\\" level=info msg=\\"sub-process exited\\" argo=true error=\\"\\u003cnil\\u003e\\"',
      'time=\\"2023-12-18T07:32:09.042Z\\" level=info msg=\\"/home/qguser/mnt/evidence.zip -\\u003e /var/run/argo/outputs/artifacts/home/qguser/mnt/evidence.zip.tgz\\" argo=true',
      'time=\\"2023-12-18T07:32:09.042Z\\" level=info msg=\\"Taring /home/qguser/mnt/evidence.zip\\"',
      'time=\\"2023-12-18T07:32:09.043Z\\" level=info msg=\\"/home/qguser/mnt/qg-result.yaml -\\u003e /var/run/argo/outputs/artifacts/home/qguser/mnt/qg-result.yaml.tgz\\" argo=true',
      'time=\\"2023-12-18T07:32:09.043Z\\" level=info msg=\\"Taring /home/qguser/mnt/qg-result.yaml\\"',
    ]

    expect(
      getCheckLogs(logs, { chapter: '1', requirement: '1', check: '1' }),
    ).toStrictEqual([
      'info\\t[[ CHAPTER: 1 REQUIREMENT: 1 CHECK: 1 ]]',
      "info\\tstarting autopilot 'security-scanner'",
      'info\\t  Status: FAILED',
      'info\\t  Reason: The provided GIT_TOKEN is not valid.',
      'info\\t  Execution Type: Automation',
      'info\\t  Evidence Path: /tmp/onyx-evidence-2023-12-18T07-32-12-787/1_1_1',
      'info\\t  Logs:',
      'info\\t    \\u001b[31m\\u001b[1mERROR | An error has occurred.\\u001b[0m',
      'info\\t    \\u001b[33m\\u001b[1mTraceback (most recent call last):\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/autopilot_utils/\\u001b[0m\\u001b[32m\\u001b[1mcli_base.py\\u001b[0m\\", line \\u001b[33m408\\u001b[0m, in \\u001b[35merror_handler\\u001b[0m',
      'info\\t        \\u001b[1mf\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[35m\\u001b[1m*\\u001b[0m\\u001b[1margs\\u001b[0m\\u001b[1m,\\u001b[0m \\u001b[35m\\u001b[1m**\\u001b[0m\\u001b[1mkwargs\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/autopilot_utils/\\u001b[0m\\u001b[32m\\u001b[1mcli_base.py\\u001b[0m\\", line \\u001b[33m387\\u001b[0m, in \\u001b[35mresult_handler_decorator\\u001b[0m',
      'info\\t        \\u001b[1mf\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[35m\\u001b[1m*\\u001b[0m\\u001b[1margs\\u001b[0m\\u001b[1m,\\u001b[0m \\u001b[35m\\u001b[1m**\\u001b[0m\\u001b[1mkwargs\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/autopilot_utils/\\u001b[0m\\u001b[32m\\u001b[1mcli_base.py\\u001b[0m\\", line \\u001b[33m224\\u001b[0m, in \\u001b[35mmain_cli_entrypoint_wrapper\\u001b[0m',
      'info\\t        \\u001b[1mclick_command\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[35m\\u001b[1m*\\u001b[0m\\u001b[1margs\\u001b[0m\\u001b[1m,\\u001b[0m \\u001b[35m\\u001b[1m**\\u001b[0m\\u001b[1mkwargs\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/security_scanner/\\u001b[0m\\u001b[32m\\u001b[1mcli.py\\u001b[0m\\", line \\u001b[33m19\\u001b[0m, in \\u001b[35mclick_command\\u001b[0m',
      'info\\t        \\u001b[1mconfiguration\\u001b[0m \\u001b[35m\\u001b[1m=\\u001b[0m \\u001b[1mload_configuration\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t      File \\"\\u001b[32m/home/qguser/.pex/unzipped_pexes/eedf0d5f4b1d9f8e3c7e1f2ed5367a0e1a4811a3/grow/security_scanner/\\u001b[0m\\u001b[32m\\u001b[1mconfig.py\\u001b[0m\\", line \\u001b[33m61\\u001b[0m, in \\u001b[35mload_configuration\\u001b[0m',
      'info\\t        \\u001b[35m\\u001b[1mraise\\u001b[0m \\u001b[1mAutopilotConfigurationError\\u001b[0m\\u001b[1m(\\u001b[0m\\u001b[36m\\"The provided GIT_TOKEN is not valid.\\"\\u001b[0m\\u001b[1m)\\u001b[0m',
      'info\\t    \\u001b[31m\\u001b[1mgrow.autopilot_utils.errors.AutopilotConfigurationError\\u001b[0m:\\u001b[1m The provided GIT_TOKEN is not valid.\\u001b[0m',
      'info\\t    {\\"status\\": \\"FAILED\\", \\"reason\\": \\"The provided GIT_TOKEN is not valid.\\"}',
    ])
  })

  it('returns the same logs when the checks is not found', () => {
    const logs = [
      'Workflow has not finished properly, no result found or result corrupted',
      '==========',
      'time=\\"2023-12-18T10:24:17.208Z\\" level=info msg=\\"capturing logs\\" argo=true',
      'info\\t[ PREPARATION ]',
      "info\\treading file 'qg-config.yaml'",
      "info\\treading file '.vars'",
      "info\\treading file '.secrets'",
      'info\\t[ INITIALIZE EXECUTION PLAN ]',
      'info\\tparsing config file',
      'info\\tvalidating config file',
      'info\\tcreating execution plan',
      'info\\ttransform execution plan',
      "Error: error initializing execution plan: error transforming execution plan: Check '4_1_1' is a manual check, skipping the others does not make sense",
      "error\\terror initializing execution plan: error transforming execution plan: Check '4_1_1' is a manual check, skipping the others does not make sense",
      'Usage:',
      '  onyx exec [input-folder] [flags]',
      'Flags:',
      '  -c, --check string          Used with a value in the format \\u003cchapterId\\u003e_\\u003crequirementId\\u003e_\\u003ccheckId\\u003e to select a single check to run, others will be skipped',
      '      --config-name string    Path to the config file (default \\"qg-config.yaml\\")',
      '  -h, --help                  help for exec',
      '      --output-dir string     output folder, defaults to the current directory (default \\".\\")',
      '      --secrets-name string   Name of the secrets file in the input folder (default \\".secrets\\")',
      '      --strict                If set to true, the autopilot will return a ERROR status if the JSON line output is not valid',
      '      --vars-name string      Path to the variables file (default \\".vars\\")',
      'Global Flags:',
      '      --log-level string   log level, one of: debug, info, warn, error, fatal, panic (default \\"info\\")',
      'time=\\"2023-12-18T10:24:18.208Z\\" level=info msg=\\"sub-process exited\\" argo=true error=\\"\\u003cnil\\u003e\\"',
      'time=\\"2023-12-18T10:24:18.208Z\\" level=warning msg=\\"cannot save artifact /home/qguser/mnt/evidence.zip\\" argo=true error=\\"stat /home/qguser/mnt/evidence.zip: no such file or directory\\"',
      'time=\\"2023-12-18T10:24:18.208Z\\" level=warning msg=\\"cannot save artifact /home/qguser/mnt/qg-result.yaml\\" argo=true error=\\"stat /home/qguser/mnt/qg-result.yaml: no such file or directory\\"',
      'Error: exit status 1',
    ]
    expect(
      getCheckLogs(logs, { chapter: '1', requirement: '1', check: '1' }),
    ).toStrictEqual(logs)
  })
})
