import { ApiProperty } from '@nestjs/swagger'
import { IsBoolean, IsEnum, IsInt, IsString, Length } from 'class-validator'
import { RunOverallStatusType } from '../utils/enums/runOverallStatusType.enum'
import { StatusType } from '../utils/enums/statusType.enum'
import { Finding } from '../entity/finding.entity'
import { Metadata } from '../utils/interfaces/findingsInterfaces'
import { RunStatus } from '../../run/run.entity'
import { UserInNamespaceDto } from '../../users/users.utils'
export class GetFindingDTO {
  constructor(finding: Finding) {
    this.id = finding.id
    this.uniqueIdHash = finding.uniqueIdHash
    this.metadata = finding.metadata
    this.namespaceId = finding.namespaceId
    this.configId = finding.configId
    this.runId = finding.runId
    this.runStatus = finding.runStatus
    this.runOverallResult = finding.runOverallResult
    this.runCompletionTime = finding.runCompletionTime
    this.chapter = finding.chapter
    this.requirement = finding.requirement
    this.check = finding.check
    this.criterion = finding.criterion
    this.justification = finding.justification
    this.occurrenceCount = finding.occurrenceCount
    this.status = finding.status
    this.resolvedComment = finding.resolvedComment
    this.resolvedDate = finding.resolvedDate
    this.resolver = finding.resolver
    this.createdAt = finding.createdAt
    this.updatedAt = finding.updatedAt
  }

  @ApiProperty({
    example: 'a4f523a2-6c1e-4bc3-9a08-2347c529a78d',
    description: 'The ID of the finding.',
  })
  readonly id: string

  @ApiProperty({
    example: '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08',
    description:
      'The unique ID generated by SHA256 algorithm based on target fields.',
  })
  @IsString()
  @Length(1, 300)
  uniqueIdHash: string

  @ApiProperty({
    example: { key1: 'value1', key2: 'value2' },
    description: 'The metadata object with dynamic key-value pairs.',
  })
  metadata: Metadata

  @ApiProperty({
    example: 1,
    description: 'The ID of the namespace associated with the finding.',
  })
  @IsInt()
  readonly namespaceId: number

  @ApiProperty({
    example: 5,
    description: 'The ID of the config associated with the finding.',
  })
  @IsInt()
  readonly configId: number

  @ApiProperty({
    example: 11,
    description: 'The ID of the run associated with the finding.',
  })
  @IsInt()
  readonly runId: number

  @ApiProperty({
    example: 'completed',
    description: 'The status of the run associated with the finding.',
    enum: RunStatus,
  })
  @IsEnum(RunStatus)
  readonly runStatus: RunStatus

  @ApiProperty({
    example: 'RED',
    description:
      'The overall result of the run associated with the finding (if completed).',
    enum: RunOverallStatusType,
  })
  @IsEnum(RunOverallStatusType)
  readonly runOverallResult?: RunOverallStatusType

  @ApiProperty({
    example: '2023-06-02T14:28:13.000Z',
    description:
      'The completion time of the run associated with the finding (if completed or failed).',
  })
  @IsString()
  readonly runCompletionTime?: string

  @ApiProperty({
    example: '1',
    description: 'The chapter number from the QG Config.',
  })
  @IsString()
  chapter?: string

  @ApiProperty({
    example: '1.1',
    description: 'The requirement number from the QG Config.',
  })
  @IsString()
  requirement?: string

  @ApiProperty({
    example: '1.1',
    description: 'The check number from the QG Config.',
  })
  @IsString()
  check?: string

  @ApiProperty({
    example: 'Vulnerability scans of qg-apps-typescript',
    description:
      'The criterion for performing the checks and identify findings.',
  })
  @IsString()
  criterion?: string

  @ApiProperty({
    example:
      'In vm2 for version up to 3.9.19, inspect functions allows attackers to escape the sandbox and run arbitrary code.',
    description: 'The reason why the criterion was not met.',
  })
  @IsString()
  justification?: string

  @ApiProperty({
    example: 1,
    description:
      'The number of occurrences of a finding since it was saved in the database.',
  })
  @IsInt()
  readonly occurrenceCount: number

  @ApiProperty({
    example: 'unresolved',
    description: 'The status of the finding (resolved or unresolved).',
    enum: StatusType,
  })
  @IsEnum(StatusType)
  readonly status: StatusType

  @ApiProperty({
    example: 'It was resolved',
    description: 'The comment describing the resolution of the finding.',
  })
  @IsString()
  readonly resolvedComment?: string

  @ApiProperty({
    example: '2023-08-23T05:18:23.186Z',
    description: 'The timestamp when the finding was resolved.',
  })
  @IsString()
  readonly resolvedDate?: string

  @ApiProperty({
    description: 'Resolver of the finding.',
  })
  resolver?: string | UserInNamespaceDto

  @ApiProperty({
    example: '2023-08-23T05:18:23.186Z',
    description: 'The timestamp when the finding was created.',
  })
  @ApiProperty({
    example: true,
    description:
      'The flag that validates if the finding was resolved manually by an user or not.',
  })
  @IsBoolean()
  resolvedManually?: boolean

  @ApiProperty({
    example: '2023-08-23T05:35:43.373Z',
    description: 'The timestamp when the finding was created.',
  })
  @IsString()
  readonly createdAt?: Date

  @ApiProperty({
    example: '2023-08-23T05:35:43.373Z',
    description: 'The timestamp when the finding was updated.',
  })
  @IsString()
  readonly updatedAt?: Date
}
