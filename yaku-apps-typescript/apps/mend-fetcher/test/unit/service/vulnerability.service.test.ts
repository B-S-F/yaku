/**
 * Copyright (c) 2023 by grow platform GmbH
 */

import { afterEach, describe, expect, it, vi } from 'vitest'
import { MendEnvironment } from '../../../src/model/mendEnvironment'
import { Vulnerability } from '../../../src/model/vulnerability'
import { VulnerabilityService } from '../../../src/service/vulnerability.service'
import * as VulnerabilityFetcher from '../../../src/fetcher/vulnerability.fetcher'
import { envFixture } from '../fixtures/env'
import { FakeAuthenticator } from '../fixtures/fakeauth'
import { vulnerabilitiesDTO } from '../fixtures/dto'
import { vulnerabilitiesFixSummaryDTO } from '../fixtures/dto'
import { vulnerabilitiesModel } from '../fixtures/model'
import { vulnerabilityFixSummaryModel } from '../fixtures/model'
import { VulnerabilityFixSummary } from '../../../src/model/vulnerabilityFixSummary'

describe('vulnerability.service', () => {
  const env: MendEnvironment = envFixture

  vi.mock('Authenticator', () => {
    const mock = {
      getInstance: vi.fn(() => new FakeAuthenticator(env)),
    }
    return mock
  })

  afterEach(() => {
    vi.clearAllMocks()
    vi.restoreAllMocks()
  })

  it('should return all library vulnerabilities', async () => {
    const spy = vi.spyOn(VulnerabilityFetcher, 'getLibraryVulnerabilityDTOs')
    spy.mockReturnValue(Promise.resolve(vulnerabilitiesDTO))
    const libraryUuid = 'library-uuid'
    const expected: Vulnerability[] = vulnerabilitiesModel

    const vulnerabilityService = new VulnerabilityService(env)
    const result: Vulnerability[] =
      await vulnerabilityService.getAllVulnerabilitiesById(
        libraryUuid,
        env.projectToken
      )

    expect(result).toStrictEqual(expected)
  })

  it('should return fixes for a vulnerability', async () => {
    const spy = vi.spyOn(VulnerabilityFetcher, 'getVulnerabilityFixesDTOs')
    spy.mockReturnValue(Promise.resolve(vulnerabilitiesFixSummaryDTO))
    const vulnerabilityId = 'vulnerability-uuid'
    const expected: VulnerabilityFixSummary = vulnerabilityFixSummaryModel

    const vulnerabilityService = new VulnerabilityService(env)
    const result: VulnerabilityFixSummary =
      await vulnerabilityService.getAllVulnerabilitiesFixSummaryById(
        vulnerabilityId
      )

    expect(result).toStrictEqual(expected)
  })
})
