<%_ 
const labels = {
  auto: 'Automatically',
  manual: 'Manually',
  unanswered: 'Unanswered',
  NA: 'N/A'
}

const requirements = []

for (const allocation of Object.values(allocations)) {
  requirements.push(...Object.values(allocation.requirements))
}

const answerStatuses = {
  auto: 0,
  manual: 0,
  unanswered: 0,
}

const results = {
  GREEN: 0,
  YELLOW: 0,
  RED: 0,
  NA: 0
}

for (const requirement of requirements) {
  if (requirement.status === 'PENDING') {
    ++answerStatuses.unanswered
  } else {
    const status = (requirement.status === 'FAILED' || requirement.status === 'ERROR') ? 'RED' : requirement.status
    if (requirement.manualStatus) {
      ++answerStatuses.manual
    } else {
      ++answerStatuses.auto
    }
    ++results[status]
  }
}

const totalAnswered = answerStatuses.auto + answerStatuses.manual
_%>
    <h2>Status of Results</h2>
    <p>
      Result of answered:
      <%- include('chart-legend.ejs', {
        data: Object.entries(results).filter(([name, value]) => value),
        count: totalAnswered,
        labels
      }) %>
    </p>
    <p>
      <%- include('bar-chart.ejs', {
        data: [
          ...Object.entries(results).filter(([name, value]) => value),
          ['empty', answerStatuses.unanswered]
        ],
        count: requirements.length
      }) %>
    </p>
    <p>
      <%- include('bar-chart.ejs', {
        data: Object.entries(answerStatuses),
        count: requirements.length
      }) %>
    </p>
    <p>
      Answered:
      <%- include('chart-legend.ejs', {
        data: Object.entries(answerStatuses),
        count: requirements.length,
        labels
      }) %>
    </p>
